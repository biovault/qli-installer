name: "Common build install steps"
description: "Install conan and other required python libs"
author: "Baldur van Lew"

inputs:
  conan_version:
    description: "Exact conan version to be installed for example 1.40.4 (optional - installs latest)"
    required: false
    default: "latest"

  artifactory_url:
    description: "The URL for the artifactory, for example: https://lkeb-artifactory.lumc.nl/artifactory/api/conan/conan-local (optional)"
    required: false
    default: "https://lkeb-artifactory.lumc.nl/artifactory/api/conan/conan-local"

  remote_name:
    description: "The name for the artifactory, for example: lkeb_artifactory (optional)"
    required: false
    default: "lkeb_artifactory"

  remote_user:
    description: "The  username for the artifactory, (recommend sourced in a secret)"
    required: true
    default: "lkeb_artifactory"

  remote_password:
    description: "The password for the artifactory, (recommend sourced in a secret)"
    required: true
    default: "lkeb_artifactory"

outputs:
  version:
    description: "The actual conan verion installed"
    value: ${{ steps.get_version.outputs.version }}

runs:
  using: "composite"
  steps:
    - run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        if [[ ${{ inputs.conan_version }} == "latest" ]]; then
          pip install conan --upgrade
        else
          pip install conan==${{ inputs.conan_version }}
        fi
      shell: bash

    - name: Fix path on Linux
      run: |
        echo "/home/runner/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Setup conan remote (artifactory)
      # Including fix the certificate chain
      run: |
        conan user
        conanhome=`conan config home`
        ls -l $GITHUB_ACTION_PATH/../../../
        echo -e $GITHUB_ACTION_PATH/../../../cert.pem >> $conanhome/cacert.pem
        conan remote add ${{ inputs.remote_name }} ${{ inputs.artifactory_url}}
        conan user -r ${{ inputs.remote_name }} -p ${{ inputs.remote_password }} ${{ inputs.remote_user }}
      shell: bash

    - name: Fill in output variable
      id: get_version
      shell: bash
      run: |
        conan --version
        echo "::set-output name=version::$(conan --version)"
